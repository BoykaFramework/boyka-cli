name: Publish to GitHub

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: What is the type of this release?
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: minor

env:
  GITHUB_AUTH: ${{ secrets.PUSH_TOKEN }}
  PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      new-version: ${{ steps.version.outputs.version }}
      old-version: ${{ steps.old_version.outputs.previous_version }}
      changelog: ${{ steps.changelog.outputs.changes }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4

      - name: Setup Node v18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install && pnpm build

      - name: Get the previous version
        id: old_version
        run: |
          export OLD_VERSION=$(node -pe "require('./package.json').version")
          echo "previous_version=${OLD_VERSION}" >> $GITHUB_OUTPUT

      - name: Update the release version and publish to NPM
        run: pnpm release:${{ inputs.release-type }}

      - name: Get the new version
        id: version
        run: |
          export NEW_VERSION=$(node -pe "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate Change log
        if: ${{ steps.version.outputs.version != null }}
        id: changelog
        run: |
          export CHANGELOG=$(pnpm --silent changelog --from ${{ steps.old_version.outputs.previous_version }} --next-version ${{ steps.version.outputs.version }})
          delimiter="$(openssl rand -hex 8)"
          echo "changes<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$CHANGELOG" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Print Changelog
        run: echo "${{ steps.changelog.outputs.changes }}"

      - name: Upload updated version related files to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version-files-${{ github.run_id }}
          retention-days: 1
          path: |
            ${{ github.workspace }}/lerna.json
            ${{ github.workspace }}/package.json

  push-pom:
    runs-on: ubuntu-latest
    needs:
      - prepare

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.PUSH_TOKEN }}

      - name: Download Version files
        uses: actions/download-artifact@v4
        with:
          name: version-files-${{ github.run_id }}

      - name: Update Changelog file for v${{ needs.prepare.outputs.new-version }}
        run: |
          echo "${{ needs.prepare.outputs.changelog }}" > CHANGELOG.md

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ env.GPG_PRIVATE_KEY }}
          passphrase: ${{ env.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Push updated version files
        uses: EndBug/add-and-commit@v9
        with:
          message: |
            chore(Internal): :bookmark: released v${{ needs.prepare.outputs.new-version }} to NPM
          push: true
          default_author: user_info
          commit: --no-verify

  github:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - push-pom

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Version files
        uses: actions/download-artifact@v4
        with:
          name: version-files-${{ github.run_id }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ env.PUSH_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          tag_name: ${{ needs.prepare.outputs.new-version }}
          name: Version ${{ needs.prepare.outputs.new-version }}
          prerelease: false
          draft: false
          body: ${{ needs.prepare.outputs.changelog }}
          discussion_category_name: Announcements
          generate_release_notes: false
